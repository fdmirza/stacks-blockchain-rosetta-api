/* tslint:disable */
/* eslint-disable */
/**
 * Stacks 2.0 Blockchain API
 * This is the documentation for the Stacks 2.0 Blockchain API.  It is comprised of two parts; the Stacks Blockchain API and the Stacks Core API.  [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/614feab5c108d292bffa#?env%5BStacks%20Blockchain%20API%5D=W3sia2V5Ijoic3R4X2FkZHJlc3MiLCJ2YWx1ZSI6IlNUMlRKUkhESE1ZQlE0MTdIRkIwQkRYNDMwVFFBNVBYUlg2NDk1RzFWIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJibG9ja19pZCIsInZhbHVlIjoiMHgiLCJlbmFibGVkIjp0cnVlfSx7ImtleSI6Im9mZnNldCIsInZhbHVlIjoiMCIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoibGltaXRfdHgiLCJ2YWx1ZSI6IjIwMCIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoibGltaXRfYmxvY2siLCJ2YWx1ZSI6IjMwIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJ0eF9pZCIsInZhbHVlIjoiMHg1NDA5MGMxNmE3MDJiNzUzYjQzMTE0ZTg4NGJjMTlhODBhNzk2MzhmZDQ0OWE0MGY4MDY4Y2RmMDAzY2RlNmUwIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJjb250cmFjdF9pZCIsInZhbHVlIjoiU1RKVFhFSlBKUFBWRE5BOUIwNTJOU1JSQkdRQ0ZOS1ZTMTc4VkdIMS5oZWxsb193b3JsZFxuIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJidGNfYWRkcmVzcyIsInZhbHVlIjoiYWJjIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJjb250cmFjdF9hZGRyZXNzIiwidmFsdWUiOiJTVEpUWEVKUEpQUFZETkE5QjA1Mk5TUlJCR1FDRk5LVlMxNzhWR0gxIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJjb250cmFjdF9uYW1lIiwidmFsdWUiOiJoZWxsb193b3JsZCIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoiY29udHJhY3RfbWFwIiwidmFsdWUiOiJzdG9yZSIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoiY29udHJhY3RfbWV0aG9kIiwidmFsdWUiOiJnZXQtdmFsdWUiLCJlbmFibGVkIjp0cnVlfV0=)  ## Design  ### Stacks Core API vs Stacks Blockchain API The blockchain\'s Rust implementation exposes a JSON RPC endpoint (\"Stacks Core API\"), which can be used to interface with the blockchain. It can be used directly. [See the documentation for the `stacks-blockchain` in its Github repository](https://github.com/blockstack/stacks-blockchain/)  All `/v2/` routes a proxied to a Blockstack PBC-hosted Stacks Node. For a trustless architecture, you should make these requests to a self-hosted node.  All `/extended/` routes are provided by the Stacks 2.0 Blockchain API directly. They extend the Stacks Core API capabilities to make it easier to integrate with.  ### Pagination To make API responses more compact, lists returned by the API are paginated. For lists, the response body includes:       - `limit`: the number of list items return per response   - `offset`: the number of elements to skip (starting from `0`)   - `total`: the number of all available list items   - `results`: the array of list items (length of array equals the set limit)  Using the `limit` and `offset` properties, you can paginate through the entire list by increasing the offset by the limit until you reach the total. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * GET request that core node information
 * @export
 * @interface CoreNodeInfoResponse
 */
export interface CoreNodeInfoResponse {
    /**
     * 
     * @type {number}
     * @memberof CoreNodeInfoResponse
     */
    limit?: number;
    /**
     * 
     * @type {number}
     * @memberof CoreNodeInfoResponse
     */
    peer_version: number;
    /**
     * 
     * @type {string}
     * @memberof CoreNodeInfoResponse
     */
    burn_consensus: string;
    /**
     * 
     * @type {number}
     * @memberof CoreNodeInfoResponse
     */
    burn_block_height: number;
    /**
     * 
     * @type {string}
     * @memberof CoreNodeInfoResponse
     */
    stable_burn_consensus: string;
    /**
     * 
     * @type {number}
     * @memberof CoreNodeInfoResponse
     */
    stable_burn_block_height: number;
    /**
     * 
     * @type {string}
     * @memberof CoreNodeInfoResponse
     */
    server_version: string;
    /**
     * 
     * @type {number}
     * @memberof CoreNodeInfoResponse
     */
    network_id: number;
    /**
     * 
     * @type {number}
     * @memberof CoreNodeInfoResponse
     */
    parent_network_id: number;
    /**
     * 
     * @type {number}
     * @memberof CoreNodeInfoResponse
     */
    stacks_tip_height: number;
    /**
     * 
     * @type {string}
     * @memberof CoreNodeInfoResponse
     */
    stacks_tip: string;
    /**
     * 
     * @type {string}
     * @memberof CoreNodeInfoResponse
     */
    stacks_tip_burn_block: string;
    /**
     * 
     * @type {number}
     * @memberof CoreNodeInfoResponse
     */
    exit_at_block_height: number;
}

export function CoreNodeInfoResponseFromJSON(json: any): CoreNodeInfoResponse {
    return CoreNodeInfoResponseFromJSONTyped(json, false);
}

export function CoreNodeInfoResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CoreNodeInfoResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'limit': !exists(json, 'limit') ? undefined : json['limit'],
        'peer_version': json['peer_version'],
        'burn_consensus': json['burn_consensus'],
        'burn_block_height': json['burn_block_height'],
        'stable_burn_consensus': json['stable_burn_consensus'],
        'stable_burn_block_height': json['stable_burn_block_height'],
        'server_version': json['server_version'],
        'network_id': json['network_id'],
        'parent_network_id': json['parent_network_id'],
        'stacks_tip_height': json['stacks_tip_height'],
        'stacks_tip': json['stacks_tip'],
        'stacks_tip_burn_block': json['stacks_tip_burn_block'],
        'exit_at_block_height': json['exit_at_block_height'],
    };
}

export function CoreNodeInfoResponseToJSON(value?: CoreNodeInfoResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'limit': value.limit,
        'peer_version': value.peer_version,
        'burn_consensus': value.burn_consensus,
        'burn_block_height': value.burn_block_height,
        'stable_burn_consensus': value.stable_burn_consensus,
        'stable_burn_block_height': value.stable_burn_block_height,
        'server_version': value.server_version,
        'network_id': value.network_id,
        'parent_network_id': value.parent_network_id,
        'stacks_tip_height': value.stacks_tip_height,
        'stacks_tip': value.stacks_tip,
        'stacks_tip_burn_block': value.stacks_tip_burn_block,
        'exit_at_block_height': value.exit_at_block_height,
    };
}


