/* tslint:disable */
/* eslint-disable */
/**
 * Stacks 2.0 Blockchain API
 * This is the documentation for the Stacks 2.0 Blockchain API.  It is comprised of two parts; the Stacks Blockchain API and the Stacks Core API.  [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/614feab5c108d292bffa#?env%5BStacks%20Blockchain%20API%5D=W3sia2V5Ijoic3R4X2FkZHJlc3MiLCJ2YWx1ZSI6IlNUMlRKUkhESE1ZQlE0MTdIRkIwQkRYNDMwVFFBNVBYUlg2NDk1RzFWIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJibG9ja19pZCIsInZhbHVlIjoiMHgiLCJlbmFibGVkIjp0cnVlfSx7ImtleSI6Im9mZnNldCIsInZhbHVlIjoiMCIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoibGltaXRfdHgiLCJ2YWx1ZSI6IjIwMCIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoibGltaXRfYmxvY2siLCJ2YWx1ZSI6IjMwIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJ0eF9pZCIsInZhbHVlIjoiMHg1NDA5MGMxNmE3MDJiNzUzYjQzMTE0ZTg4NGJjMTlhODBhNzk2MzhmZDQ0OWE0MGY4MDY4Y2RmMDAzY2RlNmUwIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJjb250cmFjdF9pZCIsInZhbHVlIjoiU1RKVFhFSlBKUFBWRE5BOUIwNTJOU1JSQkdRQ0ZOS1ZTMTc4VkdIMS5oZWxsb193b3JsZFxuIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJidGNfYWRkcmVzcyIsInZhbHVlIjoiYWJjIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJjb250cmFjdF9hZGRyZXNzIiwidmFsdWUiOiJTVEpUWEVKUEpQUFZETkE5QjA1Mk5TUlJCR1FDRk5LVlMxNzhWR0gxIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJjb250cmFjdF9uYW1lIiwidmFsdWUiOiJoZWxsb193b3JsZCIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoiY29udHJhY3RfbWFwIiwidmFsdWUiOiJzdG9yZSIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoiY29udHJhY3RfbWV0aG9kIiwidmFsdWUiOiJnZXQtdmFsdWUiLCJlbmFibGVkIjp0cnVlfV0=)  ## Design  ### Stacks Core API vs Stacks Blockchain API The blockchain\'s Rust implementation exposes a JSON RPC endpoint (\"Stacks Core API\"), which can be used to interface with the blockchain. It can be used directly. [See the documentation for the `stacks-blockchain` in its Github repository](https://github.com/blockstack/stacks-blockchain/)  All `/v2/` routes a proxied to a Blockstack PBC-hosted Stacks Node. For a trustless architecture, you should make these requests to a self-hosted node.  All `/extended/` routes are provided by the Stacks 2.0 Blockchain API directly. They extend the Stacks Core API capabilities to make it easier to integrate with.  ### Pagination To make API responses more compact, lists returned by the API are paginated. For lists, the response body includes:       - `limit`: the number of list items return per response   - `offset`: the number of elements to skip (starting from `0`)   - `total`: the number of all available list items   - `results`: the array of list items (length of array equals the set limit)  Using the `limit` and `offset` properties, you can paginate through the entire list by increasing the offset by the limit until you reach the total. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ContractInterfaceResponse,
    ContractInterfaceResponseFromJSON,
    ContractInterfaceResponseToJSON,
    ContractSourceResponse,
    ContractSourceResponseFromJSON,
    ContractSourceResponseToJSON,
} from '../models';

export interface CallReadOnlyFunctionRequest {
    stacksAddress: string;
    contractName: string;
    functionName: string;
}

export interface GetContractByIdRequest {
    contractId: string;
}

export interface GetContractDataMapRequest {
    stacksAddress: string;
    contractName: string;
    mapName: string;
    body: object;
    proof?: number;
}

export interface GetContractEventsByIdRequest {
    contractId: string;
}

export interface GetContractInterfaceRequest {
    stacksAddress: string;
    contractName: string;
}

export interface GetContractSourceRequest {
    stacksAddress: string;
    contractName: string;
    proof?: number;
}

/**
 * 
 */
export class SmartContractsApi extends runtime.BaseAPI {

    /**
     * Call a read-only public function on a given smart contract.  The smart contract and function are specified using the URL path. The arguments and the simulated tx-sender are supplied via the POST body in the following JSON format: 
     * Call read-only function
     */
    async callReadOnlyFunctionRaw(requestParameters: CallReadOnlyFunctionRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.stacksAddress === null || requestParameters.stacksAddress === undefined) {
            throw new runtime.RequiredError('stacksAddress','Required parameter requestParameters.stacksAddress was null or undefined when calling callReadOnlyFunction.');
        }

        if (requestParameters.contractName === null || requestParameters.contractName === undefined) {
            throw new runtime.RequiredError('contractName','Required parameter requestParameters.contractName was null or undefined when calling callReadOnlyFunction.');
        }

        if (requestParameters.functionName === null || requestParameters.functionName === undefined) {
            throw new runtime.RequiredError('functionName','Required parameter requestParameters.functionName was null or undefined when calling callReadOnlyFunction.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/contracts/call-read/{stacks_address}/{contract_name}/{function_name}`.replace(`{${"stacks_address"}}`, encodeURIComponent(String(requestParameters.stacksAddress))).replace(`{${"contract_name"}}`, encodeURIComponent(String(requestParameters.contractName))).replace(`{${"function_name"}}`, encodeURIComponent(String(requestParameters.functionName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Call a read-only public function on a given smart contract.  The smart contract and function are specified using the URL path. The arguments and the simulated tx-sender are supplied via the POST body in the following JSON format: 
     * Call read-only function
     */
    async callReadOnlyFunction(requestParameters: CallReadOnlyFunctionRequest): Promise<void> {
        await this.callReadOnlyFunctionRaw(requestParameters);
    }

    /**
     * Get contract info using the contract ID
     * Get contract info
     */
    async getContractByIdRaw(requestParameters: GetContractByIdRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.contractId === null || requestParameters.contractId === undefined) {
            throw new runtime.RequiredError('contractId','Required parameter requestParameters.contractId was null or undefined when calling getContractById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/extended/v1/contract/{contract_id}`.replace(`{${"contract_id"}}`, encodeURIComponent(String(requestParameters.contractId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get contract info using the contract ID
     * Get contract info
     */
    async getContractById(requestParameters: GetContractByIdRequest): Promise<object> {
        const response = await this.getContractByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Attempt to fetch data from a contract data map. The contract is identified with [Stacks Address] and [Contract Name] in the URL path. The map is identified with [Map Name].  The key to lookup in the map is supplied via the POST body. This should be supplied as the hex string serialization of the key (which should be a Clarity value). Note, this is a JSON string atom.  In the response, `data` is the hex serialization of the map response. Note that map responses are Clarity option types, for non-existent values, this is a serialized none, and for all other responses, it is a serialized (some ...) object. 
     * Get specific data-map inside a contract
     */
    async getContractDataMapRaw(requestParameters: GetContractDataMapRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.stacksAddress === null || requestParameters.stacksAddress === undefined) {
            throw new runtime.RequiredError('stacksAddress','Required parameter requestParameters.stacksAddress was null or undefined when calling getContractDataMap.');
        }

        if (requestParameters.contractName === null || requestParameters.contractName === undefined) {
            throw new runtime.RequiredError('contractName','Required parameter requestParameters.contractName was null or undefined when calling getContractDataMap.');
        }

        if (requestParameters.mapName === null || requestParameters.mapName === undefined) {
            throw new runtime.RequiredError('mapName','Required parameter requestParameters.mapName was null or undefined when calling getContractDataMap.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling getContractDataMap.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.proof !== undefined) {
            queryParameters['proof'] = requestParameters.proof;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v2/map_entry/{stacks_address}/{contract_name}/{map_name}`.replace(`{${"stacks_address"}}`, encodeURIComponent(String(requestParameters.stacksAddress))).replace(`{${"contract_name"}}`, encodeURIComponent(String(requestParameters.contractName))).replace(`{${"map_name"}}`, encodeURIComponent(String(requestParameters.mapName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Attempt to fetch data from a contract data map. The contract is identified with [Stacks Address] and [Contract Name] in the URL path. The map is identified with [Map Name].  The key to lookup in the map is supplied via the POST body. This should be supplied as the hex string serialization of the key (which should be a Clarity value). Note, this is a JSON string atom.  In the response, `data` is the hex serialization of the map response. Note that map responses are Clarity option types, for non-existent values, this is a serialized none, and for all other responses, it is a serialized (some ...) object. 
     * Get specific data-map inside a contract
     */
    async getContractDataMap(requestParameters: GetContractDataMapRequest): Promise<void> {
        await this.getContractDataMapRaw(requestParameters);
    }

    /**
     * Get contract events using a contract ID
     * Get contract events
     */
    async getContractEventsByIdRaw(requestParameters: GetContractEventsByIdRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.contractId === null || requestParameters.contractId === undefined) {
            throw new runtime.RequiredError('contractId','Required parameter requestParameters.contractId was null or undefined when calling getContractEventsById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/extended/v1/contract/{contract_id}/events`.replace(`{${"contract_id"}}`, encodeURIComponent(String(requestParameters.contractId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get contract events using a contract ID
     * Get contract events
     */
    async getContractEventsById(requestParameters: GetContractEventsByIdRequest): Promise<object> {
        const response = await this.getContractEventsByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get contract interface using a `stacks_address` and contract name
     * Get contract interface
     */
    async getContractInterfaceRaw(requestParameters: GetContractInterfaceRequest): Promise<runtime.ApiResponse<ContractInterfaceResponse>> {
        if (requestParameters.stacksAddress === null || requestParameters.stacksAddress === undefined) {
            throw new runtime.RequiredError('stacksAddress','Required parameter requestParameters.stacksAddress was null or undefined when calling getContractInterface.');
        }

        if (requestParameters.contractName === null || requestParameters.contractName === undefined) {
            throw new runtime.RequiredError('contractName','Required parameter requestParameters.contractName was null or undefined when calling getContractInterface.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/contracts/interface/{stacks_address}/{contract_name}`.replace(`{${"stacks_address"}}`, encodeURIComponent(String(requestParameters.stacksAddress))).replace(`{${"contract_name"}}`, encodeURIComponent(String(requestParameters.contractName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ContractInterfaceResponseFromJSON(jsonValue));
    }

    /**
     * Get contract interface using a `stacks_address` and contract name
     * Get contract interface
     */
    async getContractInterface(requestParameters: GetContractInterfaceRequest): Promise<ContractInterfaceResponse> {
        const response = await this.getContractInterfaceRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns the Clarity source code of a given contract, along with the block height it was published in, and the MARF proof for the data
     * Get contract source
     */
    async getContractSourceRaw(requestParameters: GetContractSourceRequest): Promise<runtime.ApiResponse<ContractSourceResponse>> {
        if (requestParameters.stacksAddress === null || requestParameters.stacksAddress === undefined) {
            throw new runtime.RequiredError('stacksAddress','Required parameter requestParameters.stacksAddress was null or undefined when calling getContractSource.');
        }

        if (requestParameters.contractName === null || requestParameters.contractName === undefined) {
            throw new runtime.RequiredError('contractName','Required parameter requestParameters.contractName was null or undefined when calling getContractSource.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.proof !== undefined) {
            queryParameters['proof'] = requestParameters.proof;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/contracts/source/{stacks_address}/{contract_name}`.replace(`{${"stacks_address"}}`, encodeURIComponent(String(requestParameters.stacksAddress))).replace(`{${"contract_name"}}`, encodeURIComponent(String(requestParameters.contractName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ContractSourceResponseFromJSON(jsonValue));
    }

    /**
     * Returns the Clarity source code of a given contract, along with the block height it was published in, and the MARF proof for the data
     * Get contract source
     */
    async getContractSource(requestParameters: GetContractSourceRequest): Promise<ContractSourceResponse> {
        const response = await this.getContractSourceRaw(requestParameters);
        return await response.value();
    }

}
